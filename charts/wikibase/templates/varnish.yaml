{{- if .Values.varnish.enabled }}
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}-varnish
spec:
  interval: 5m
  chartRef:
    kind: OCIRepository
    name: varnish
    namespace: flux-system
  values:
    fullnameOverride: "varnish"
    server:
      replicas: 1

      vclConfig: |
        vcl 4.0;

        # Backend definition pointing to MediaWiki service
        backend default {
            .host = "{{ .Values.varnish.backendHost }}";
            .port = "{{ .Values.varnish.backendPort }}";
            .first_byte_timeout = {{ .Values.varnish.backendFirstByteTimeout }};
            .between_bytes_timeout = {{ .Values.varnish.backendBetweenBytesTimeout }};
        }

        # ACL for purge operations
        acl purge {
            "{{ .Values.varnish.purgeAcl }}";
            "127.0.0.1";
        }

        sub vcl_recv {
            # Set X-Forwarded-For header
            if (req.http.X-Forwarded-For) {
                set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
            } else {
                set req.http.X-Forwarded-For = client.ip;
            }
            
            # Handle PURGE requests
            if (req.method == "PURGE") {
                if (!client.ip ~ purge) {
                    return (synth(405, "Not allowed."));
                } else {
                    return (purge);
                }
            }
            
            # Pass requests from logged-in users
            if (req.http.Authorization || req.http.Cookie ~ "([sS]ession|Token)=") {
                return (pass);
            }
            
            # Normalize Accept-Encoding
            if (req.http.Accept-Encoding) {
                if (req.http.User-Agent ~ "MSIE 6") {
                    unset req.http.Accept-Encoding;
                } elsif (req.http.Accept-Encoding ~ "gzip") {
                    set req.http.Accept-Encoding = "gzip";
                } elsif (req.http.Accept-Encoding ~ "deflate") {
                    set req.http.Accept-Encoding = "deflate";
                } else {
                    unset req.http.Accept-Encoding;
                }
            }
            
            return (hash);
        }

        sub vcl_backend_response {
            # Don't cache error responses
            if (beresp.status >= 500) {
                set beresp.uncacheable = true;
                return (deliver);
            }
            
            # Don't cache if no TTL
            if (!beresp.ttl > 0s) {
                set beresp.uncacheable = true;
                return (deliver);
            }
            
            # Don't cache Set-Cookie responses
            if (beresp.http.Set-Cookie) {
                set beresp.uncacheable = true;
                return (deliver);
            }
            
            # Don't cache private content
            if (beresp.http.Authorization && !beresp.http.Cache-Control ~ "public") {
                set beresp.uncacheable = true;
                return (deliver);
            }
            
            return (deliver);
        }

        sub vcl_hit {
            if (!obj.ttl > 0s) {
                return (pass);
            }
        }

        sub vcl_pipe {
            set req.http.connection = "close";
        }
      
      resources:
        requests:
          cpu: {{ .Values.varnish.resources.requests.cpu }}
          memory: {{ .Values.varnish.resources.requests.memory }}
        limits:
          cpu: {{ .Values.varnish.resources.limits.cpu }}
          memory: {{ .Values.varnish.resources.limits.memory }}
      
      service:
        enabled: true
        type: ClusterIP
        http:
          enabled: true
          port: 80
      
      ingress:
        enabled: false
{{- end }}